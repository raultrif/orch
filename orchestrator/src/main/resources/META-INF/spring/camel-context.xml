<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://camel.apache.org/schema/spring" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:cxf="http://camel.apache.org/schema/cxf"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       ">
       
       <!-- This listens for SOAP requests and pops them on the servicerequest-q -->
    <beans:bean id="webservice" class="com.colt.orchestrator.webservice.OrchestratorServiceImpl">
        <beans:property name="uri" value="${uri.service.request}" />
    </beans:bean>

    <beans:bean id="loggingOutInterceptor" class="org.apache.cxf.interceptor.LoggingOutInterceptor">
        <beans:constructor-arg value="target/write" />
    </beans:bean>

       
	<cxf:cxfEndpoint id="webserviceEndpoint" address="${uri.webservice}" serviceClass="#webservice">
		<cxf:outInterceptors>
			<beans:ref bean="loggingOutInterceptor" />
		</cxf:outInterceptors>
		<cxf:properties>
			<beans:entry key="dataFormat" value="MESSAGE" />
		</cxf:properties>
	</cxf:cxfEndpoint>

	<camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
		<package>com.colt</package>

		<endpoint id="uri.platform.request" uri="${uri.platform.request}" />
		<endpoint id="uri.platform.response" uri="${uri.platform.response}" />
		<endpoint id="uri.cloudstack.adaptor" uri="${uri.cloudstack.adaptor}" />
		<endpoint id="uri.cloudstack" uri="${uri.cloudstack}" />

		<dataFormats>
			<jaxb id="jaxb" prettyPrint="true" contextPath="com.colt.orchestrator.message" />
			<json id="json" prettyPrint="true" />
		</dataFormats>

		<route>
			<from uri="cxf:bean:webserviceEndpoint" />
			<marshal ref="jaxb"/>
			<to uri="bean:webservice" />
		</route>

		<!-- <route> <from uri="jms:router" /> <camel:choice> <camel:when> <camel:xpath>/platform = 'cloudstack'</camel:xpath> 
			<camel:log message="Cloudstack" /> <marshal ref="json" /> <to uri="jms:cs" /> </camel:when> <camel:otherwise> <camel:log 
			message="Other message" /> <camel:to uri="file:target/messages/others" /> </camel:otherwise> </camel:choice> </route> -->
		<route id="route.router-q">
			<from ref="uri.platform.request" />
			<log message="Routing to Cloudstack adaptor queue" />
			<to ref="uri.cloudstack.adaptor" />
		</route>

		<route id="route.cloudstack-adaptor-q">
			<from ref="uri.cloudstack.adaptor" />
			<log message="Despatching to Cloudstack adaptor" />
			<bean ref="cloudstackAdaptor" />
		</route>

		<route id="route.orch-response-q">
			<from uri="uri.platform.response" />
			<log message="Despatching to Orchestrator response listener" />
			<bean ref="responseListener" />
		</route>


	</camelContext>

	<beans:bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
		<beans:property name="connectionFactory">
			<beans:bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<beans:property name="brokerURL"
					value="vm://localhost?broker.persistent=false&amp;broker.useJmx=true&amp;broker.schedulerSupport=true" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<beans:bean id="http" class="org.apache.camel.component.http.HttpComponent">
		<beans:property name="camelContext" ref="camelContext" />
	</beans:bean>

	<beans:bean id="cloudstackAdaptor" class="com.colt.cloudstack.CloudstackAdaptor">
		<beans:property name="apiKey" value="${cloudstack.client.user.admin.apikey}" />
		<beans:property name="apiSecret" value="${cloudstack.client.user.admin.secretkey}" />
		<beans:property name="uriCloudstack" value="${uri.cloudstack}" />
		<beans:property name="uriPoll" value="${uri.cloudstack.adaptor}" />
		<beans:property name="uriResponse" value="${uri.platform.response}" />
		<beans:property name="delayInitial" value="${cloudstack.delay.initial}" />
		<beans:property name="delayMultiplier" value="${cloudstack.delay.multiplier}" />
		<beans:property name="delayMaximum" value="${cloudstack.delay.maximum}" />
	</beans:bean>

	<!-- This listens on orch-response-q for adaptor responses and passes them to the appropriate handler -->
	<beans:bean id="responseListener" class="com.colt.orchestrator.engine.ResponseListener" />


	
</beans:beans>
